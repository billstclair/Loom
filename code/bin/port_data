#!/usr/bin/perl -w
use strict;

=pod

=head1 NAME

Port data from old GNU db to new file-system based data storage.

=cut

use FindBin;
my $TOP;

BEGIN
	{
	my $bin = $FindBin::RealBin;
	$bin =~ /^(.*)$/;  # defeat taint checking if enabled
	$bin = $1;         # that's our bin directory

	$TOP = "$bin/../..";  # TOP directory is two levels above bin.

	# Use safe search path.
	$ENV{PATH} =
	"$bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin";
	};

use lib "$TOP/code";

use Loom::DB::GNU;
use Loom::DB::File;
use Loom::File;
use Loom::Int128;
use Loom::Web::DB_Adapt;

my $data_dir;
my $old_db;
my $new_db;

main();

sub main
	{
	$data_dir = Loom::File->new("$TOP/data/app");
	$data_dir->restrict;

	my $old_db_name = "$TOP/data/app/loom.db";
	my $old_db_file = Loom::File->new($old_db_name);
	my $type = $old_db_file->type;

	my $already_ported = 0;

	if ($type ne "f")
		{
		$already_ported = 1;
		}

	if ($data_dir->child("grid")->type ne "")
		{
		$already_ported = 1;
		}

	if ($data_dir->child("archive")->type ne "")
		{
		$already_ported = 1;
		}
	
	if ($already_ported)
		{
		print "The db has already been ported.\n";
		return;
		}
	
	die if $already_ported;

	$old_db = Loom::DB::GNU->new($old_db_name);
	$new_db = Loom::Web::DB_Adapt->new(
		Loom::DB::File->new($data_dir) );

	{
	# Copy all the key values from old db to new db.

	my $key = $old_db->first_key;
	while (defined $key)
		{
		$new_db->put($key, $old_db->get($key));
		$key = $old_db->next_key($key);
		}
	}

	{
	# Verify that all the values were copied correctly.

	my $key = $old_db->first_key;
	while (defined $key)
		{
		die if $old_db->get($key) ne $new_db->get($key);
		$key = $old_db->next_key($key);
		}
	}

	$old_db->finish;

	# The port went perfectly, so let's rename the old db file so we don't
	# port again.

	$old_db_file->rename($old_db_name.".old");

	return;
	}
