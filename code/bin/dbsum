#!/usr/bin/perl -w
use strict;

use FindBin;
my $TOP;
BEGIN { $TOP = "$FindBin::RealBin/../.." }
use lib "$TOP/code";

use Getopt::Long;
use Loom::DB::GNU;
use Loom::Digest::SHA256;

main->new->run;

sub new
	{
	my $class = shift;
	my $s = bless({},$class);
	return $s;
	}

sub run
	{
	my $s = shift;

	my $opt = {};

	$s->usage if !GetOptions($opt,"s");

	$s->{show_stats} = $opt->{s} ? 1 : 0;

	for my $file (@ARGV)
		{
		$s->process_file($file);
		}
	}

sub process_file
	{
	my $s = shift;
	my $file = shift;

	$s->{file} = $file;
	$s->usage if !defined $s->{file};

	unless (-e $s->{file})
		{
		print STDERR "$s->{file} does not exist\n";
		exit(2);
		}

	$s->{sum} = "\000" x 32;

	$s->{db} = Loom::DB::GNU->new($s->{file});

	$s->{hasher} = Loom::Digest::SHA256->new;

	$s->{count} = 0;

	$s->{max_key} = 0;
	$s->{max_val} = 0;

	my $key = $s->{db}->first_key;
	while (defined $key)
		{
		$s->{count}++;

		##$s->show if $s->{count} % 1000 == 0;

		my $val = $s->{db}->get($key);

		my $len_key = length($key);
		$s->{max_key} = $len_key if $len_key > $s->{max_key};

		my $len_val = length($val);
		$s->{max_val} = $len_val if $len_val > $s->{max_val};

		$s->hash($key.$val);

		$key = $s->{db}->next_key($key);
		}

	$s->show;

	return;
	}

sub usage
	{
	my $s = shift;

	my $prog_name = $0;
	$prog_name =~ s#.*/##;

	print STDERR <<EOM;
Usage: $prog_name db [-s]
  -s : show statistics such as max key and value lengths
EOM
	exit(2);
	}

sub show
	{
	my $s = shift;

	my $sum = unpack("H*",$s->{sum});
	$sum = join(".",unpack("A4"x16,$sum));
	print "$s->{count}:$sum $s->{file}\n";

	if ($s->{show_stats})
		{
		print "max_key $s->{max_key}\n";
		print "max_val $s->{max_val}\n";
		}
	return;
	}

sub hash
	{
	my $s = shift;
	my $str = shift;

	my $hash = $s->{hasher}->sha256($str);
	my $sum = $s->{sum};

	die if length($hash) != 32;
	die if length($sum) != 32;

	$s->{sum} = $sum ^ $hash;
	}
